rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Secure by default 
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }    
  
    // Helper functions
    function matchUser(resource, request) {
      return resource.data.user.id == request.resource.data.user.id
    }
    function matchTrip(resource, request) {
      return resource.data.trip.id == request.resource.data.trip.id
    }

    function existTrip(tripId) {
      return exists(/databases/$(database)/documents/trips/$(tripId))
    }
    function getTripData(tripId) {
      return get(/databases/$(database)/documents/trips/$(tripId)).data
    }
    function isTripPublic(tripId) {
      return getTripData(tripId).privacy == 2 && request.auth.uid != null
    }
    function isTripOwner(tripId) {
      return getTripData(tripId).user.id == request.auth.uid 
    }

    // Users
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;

      match /following/{tripId} {
        allow read: if request.auth.uid == userId || isTripPublic(request.resource.data.trip.id) || isTripOwner(request.resource.data.trip.id) 
        allow create: if request.auth.uid == userId && existTrip(request.resource.data.trip.id);
        allow update: if request.auth.uid == userId && matchUser(resource, request) && matchTrip(resource, request)
        allow delete: if request.auth.uid == userId
      }

      match /notifications/{notificationId} {
        allow read: if request.auth.uid == userId
        allow update: if request.auth.uid == userId
        allow delete: if request.auth.uid == userId
      }
    }

    // Trips
    match /trips/{tripId} {
      allow read: if request.auth.uid == resource.data.user.id || resource.data.privacy == 2; 
      allow update: if request.auth.uid == resource.data.user.id && matchUser(resource, request)
      allow create: if request.auth.uid == request.resource.data.user.id;

      // match /followers/{userId} {
      //   // Only read followers that is you or are from public trips, or trips you own
      //   allow read: if true // resource.data.user.id == request.auth.uid || isTripPublic(resource.data.trip.id) || isTripOwner(resource.data.trip.id) 
      //   // Only update trips-users you own, but can't update trip or user
      //   allow update: if true // resource.data.user.id == request.auth.uid && matchUser(resource, request) && matchTrip(resource, request)
      //   // Only allow to create trips-users for yourself
      //   allow create: if true // request.auth.uid == request.resource.data.user.id  && existTrip(request.resource.data.trip.id);
      //   // Only allow deletion of your own records
      //   allow delete: if true //resource.data.user.id == request.auth.uid
      // }

      match /posts/{postId} {
        allow read: if resource.data.user.id == request.auth.uid || isTripPublic(tripId) || isTripOwner(tripId)
        allow update: if resource.data.user.id == request.auth.uid && matchUser(resource, request) && matchTrip(resource, request)
        allow create: if isTripOwner(tripId) && request.auth.uid == request.resource.data.user.id
        allow delete: if resource.data.user.id == request.auth.uid
      }

      // Reports
      match /flags/{flagId} {
        allow create: if request.auth.uid == request.resource.data.user.id;
        allow update: if matchUser(resource, request) && matchTrip(resource, request);
      }
    }

    // Followers of a Trip (collectionGroup)
    match /{path=**}/following/{tripId} {
      // TODO: Needs refinement when adding the Privacy to the following
      allow read: if true  //request.auth.uid == request.resource.data.user.id || isTripPublic(request.resource.data.trip.id) || isTripOwner(request.resource.data.trip.id) 
      // allow read: if request.auth.uid == request.resource.data.user.id || isTripPublic(request.resource.data.trip.id) || isTripOwner(request.resource.data.trip.id) 
    }    


    // Trips Users
    match /trips-users/{tripUserId} {
      // Only read trips-users you owns or are trip owner
      allow read: if resource.data.user.id == request.auth.uid || isTripPublic(resource.data.trip.id) || isTripOwner(resource.data.trip.id) 
      // Only update trips-users you own, but can't update trip or user
      allow update: if resource.data.user.id == request.auth.uid && matchUser(resource, request) && matchTrip(resource, request)
      // Only allow to create trips-users for yourself
      allow create: if request.auth.uid == request.resource.data.user.id  && existTrip(request.resource.data.trip.id);
      // Only allow deletion of your own records
      allow delete: if resource.data.user.id == request.auth.uid
    }

  }
}